from __future__ import print_function
import dsl
import geojson
from builtins import input
from pprint import pprint
import json

# get settings and api etc
settings = dsl.api.get_settings()
for k, v in settings.items():
    print('%s: %s' % (k, v))

print('\nDSL version %s' % dsl.api.get_dsl_version())
print('\nDSL API version %s' % dsl.api.get_api_version())

# get list of providers
providers = dsl.api.get_providers(metadata=True)
print('\n%s DSL providers are available:' % len(providers))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for k, v in providers.items():
    print('{: <20} {: <20}'.format(k, v['display_name']))

# get list of services
services = dsl.api.get_services(metadata=True)
print('\n%s DSL services are available:' % len(services))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for k, v in services.items():
    print('{: <50} {: <20}'.format(k, v['display_name']))


# get list of mapped parameters
mapped_parameters = dsl.api.get_mapped_parameters()
print('\n%s DSL mapped parameters are available:' % len(mapped_parameters))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for p in mapped_parameters:
    print('{:}'.format(p))


# filter services by parameter
print('\n--------------------------------------------------')
print('      Filter Services by Parameter')
print('--------------------------------------------------')

print('\nChoose a DSL Mapped Parameter:')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for i, p in enumerate(mapped_parameters):
    print('{: >2}. {:}'.format(i, p))

choice = input('\nEnter parameter number (default=14, elevation):')
if not choice:
    choice = '14'
choice = int(choice)

# get list of services
services = dsl.api.get_services(metadata=True, parameter=mapped_parameters[choice])
print('\n%s DSL services contain the %s parameter:' % (len(services), mapped_parameters[choice]))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
for k, v in services.items():
    print('{: <50} {: <20}'.format(k, v['display_name']))

# get features from service
print('\n--------------------------------------------------')
print('      Get Features from Service')
print('--------------------------------------------------')

services = dsl.api.get_services(metadata=True)
print('\nChoose a DSL Service(s):')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
svcs = {}
for i, (k, v) in enumerate(services.items()):
    svcs[i] = k
    print('{: >2}. {: <50} {: <20}'.format(i, k, v['display_name']))

choice = input('\nEnter services to include (comma seperated) (default=4,8)')
if not choice:
    choice = '4, 8'
uris = [svcs[int(c)] for c in choice.split(',')]
print('\n%d DSL Service(s) were selected:' % (len(uris),))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print('\n'.join(uris))

print('\nSpecify additional filters:')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
bbox = input('Enter bounding_box (e.g. -180,-90,180,90) (default:None)')
if not bbox:
    bbox = None

parameter = input('Enter parameter number (0-%d) (default:None)' % (len(mapped_parameters) - 1,))
if not parameter:
    parameter = None
else:
    parameter = mapped_parameters[int(parameter)]

geom_type = input('Enter geometry type (Point/Polygon) (default: None):')
if not geom_type:
    geom_type = None

update_cache = input('Update cached metadata (y/n) (default: n):')
if update_cache.lower() == 'y':
    update_cache = True
else:
    update_cache = False

filters = {}
for filter_name in ['parameter', 'geom_type', 'bbox']:
    filter_value = locals()[filter_name]
    if filter_value is not None:
        filters[filter_name] = filter_value

# get features as pandas dataframe using as_dataframe=True kwarg
# this is useful when writing a python script
features_df = dsl.api.get_features(services=uris,
                                   filters=filters,
                                   update_cache=update_cache,
                                   as_dataframe=True)

print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print('      %s features found' % len(features_df))
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
# get features in geojson format, useful for mapping
# this should just read the cached data generated by the above line
features_geojson = dsl.api.get_features(services=uris, filters=filters, metadata=True)
output_features = input('Print features (y/n):')
if output_features == 'y':
    pprint(dict(features_geojson))
filename = input('Enter geojson filename (default: file not saved):')
if filename:
    with open(filename, 'w') as f:
        f.write(geojson.dumps(features_geojson))
