stages:
  - build
  - test
  - deploy
  - cleanup

# Using YAML anchors to simplify configuration (reuse definitions)
.py2_template: &py2_job
  variables: {MY_PY_VER: py2}

.py3_template: &py3_job
  variables: {MY_PY_VER: py3}

.linux_template: &linux_job
  tags: [linux]

.mac_template: &mac_job
  tags: [mac]

.build_unix-like_template: &build_unix-like
  stage: build
  script:
    - export PATH=$MY_CONDA_PATH:$PATH
    - conda env create -q -n quest-$MY_PY_VER-$CI_BUILD_REF -f ${MY_PY_VER}_conda_environment.yml
    - source activate quest-$MY_PY_VER-$CI_BUILD_REF
    - python setup.py install
    - source deactivate

.build_windows_template: &build_windows
  stage: build
  script:
    - call set PATH=%MY_CONDA_PATH%\..;%MY_CONDA_PATH%;%PATH%
    - call conda env create -q -n quest-%MY_PY_VER%-%CI_BUILD_REF% -f %MY_PY_VER%_conda_environment.yml
    - call activate quest-%MY_PY_VER%-%CI_BUILD_REF%
    - python setup.py install
    - call deactivate
  tags: [win]

build_linux_py2:
  <<: [*build_unix-like, *linux_job, *py2_job]

build_linux_py3:
  <<: [*build_unix-like, *linux_job, *py3_job]

build_mac_py2:
  <<: [*build_unix-like, *mac_job, *py2_job]

build_mac_py3:
  <<: [*build_unix-like, *mac_job, *py3_job]

build_win_py2:
  <<: [*build_windows, *py2_job]

build_win_py3:
  <<: [*build_windows, *py3_job]

.test_unix-like_template: &test_unix-like
  stage: test
  script:
    - export PATH=$MY_CONDA_PATH:$PATH
    - source activate quest-$MY_PY_VER-$CI_BUILD_REF
    - py.test test
    - source deactivate

.test_windows_template: &test_windows
  stage: test
  script:
    - call set PATH=%MY_CONDA_PATH%\..;%MY_CONDA_PATH%;%PATH%
    - call activate quest-%MY_PY_VER%-%CI_BUILD_REF%
    - call py.test test
    - call deactivate
  tags: [win]

test_linux_py2:
  <<: [*test_unix-like, *linux_job, *py2_job]

test_linux_py3:
  <<: [*test_unix-like, *linux_job, *py3_job]

test_mac_py2:
  <<: [*test_unix-like, *mac_job, *py2_job]

test_mac_py3:
  <<: [*test_unix-like, *mac_job, *py3_job]

test_win_py2:
  <<: [*test_windows, *py2_job]

test_win_py3:
  <<: [*test_windows, *py3_job]

docs:
  stage: deploy
  only:
    - master
  script:
    - source $MY_CONDA_PATH/activate quest-py3-$CI_BUILD_REF
    - conda install sphinx
    - make -C docs html
    - tar -czf documentation.tar.gz docs/_build/html
    - source deactivate
  artifacts:
    paths:
    - documentation.tar.gz
  tags:
    - docs

.cleanup_unix-like_template: &cleanup_unix-like
  stage: cleanup
  script:
    - if $MY_CONDA_PATH/conda env list | grep -q quest-$MY_PY_VER-$CI_BUILD_REF; then $MY_CONDA_PATH/conda env remove -q -y -n quest-$MY_PY_VER-$CI_BUILD_REF; fi
  when: always

.cleanup_windows_template: &cleanup_windows
  stage: cleanup
  script:
    - call %MY_CONDA_PATH%\conda env list | findstr /R quest-%MY_PY_VER%-%CI_BUILD_REF% >nul 2>&1 && %MY_CONDA_PATH%\conda env remove -q -y -n quest-%MY_PY_VER%-%CI_BUILD_REF%
  when: always
  tags: [win]

cleanup_linux_py2:
  <<: [*cleanup_unix-like, *linux_job, *py2_job]

cleanup_linux_py3:
  <<: [*cleanup_unix-like, *linux_job, *py3_job]

cleanup_mac_py2:
  <<: [*cleanup_unix-like, *mac_job, *py2_job]

cleanup_mac_py3:
  <<: [*cleanup_unix-like, *mac_job, *py3_job]

cleanup_win_py2:
  <<: [*cleanup_windows, *py2_job]

cleanup_win_py3:
  <<: [*cleanup_windows, *py3_job]
